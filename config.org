* TABLE OF CONTENT :toc::
- [[#setting-up-emacs][SETTING UP EMACS]]
  - [[#all-the-repos][ALL THE REPOS]]
  - [[#doom-modelime-and-doom-theme][DOOM MODELIME AND DOOM THEME]]
  - [[#pdf-tools][PDF TOOLS]]
  - [[#fonts][FONTS]]
  - [[#org-mode][ORG MODE]]
  - [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#minibuffer-escape][MINIBUFFER ESCAPE]]
  - [[#evil-mode][EVIL MODE]]
  - [[#counsel-and-ivy][COUNSEL AND IVY]]
  - [[#toggle-shell][TOGGLE SHELL]]
  - [[#general-keybinding][GENERAL KEYBINDING]]
  - [[#alt-keybinding][ALT KEYBINDING]]
  - [[#which-key][WHICH KEY]]
  - [[#transperency][TRANSPERENCY]]
  - [[#mouse-battery-and-background-setup][MOUSE, BATTERY AND BACKGROUND SETUP]]
  - [[#ide][IDE]]
  - [[#language-support-for-ide][LANGUAGE SUPPORT FOR IDE]]
  - [[#dashboard][DASHBOARD]]
  - [[#dired][DIRED]]
  - [[#buffer-move][BUFFER MOVE]]

* SETTING UP EMACS 
** ALL THE REPOS

*** SOME REPO
#+begin_src emacs-lisp
;; Enable package management
(require 'package)

;; Set up package repositories
(setq package-archives
      '(("gnu"   . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("org"   . "https://orgmode.org/elpa/")))

;; Initialize the package system
(unless package--initialized
  (package-initialize))

;; Refresh package list if needed and install `use-package`
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Load use-package and ensure packages auto-install
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
** DOOM MODELIME AND DOOM THEME
#+begin_src emacs-lisp
;;======= DOOM MODE LINE =======
;; (package-install 'doom-modeline)
;; (require 'doom-modeline)
;; (doom-modeline-mode 1)

(use-package doom-modeline
  :ensure t
  :config
  (doom-modeline-mode 1))



;;======= DOOM THEMES ======= 
;; :>>>>> FIRST INSTALL ER SMY AY LINE GULO UNCOMMENT RAKHA LAGBE SECOND BOOT ER SMY ABR COMMENT KORE DITE HOBE <<<<<:
;; (elpaca
;;   (doom-themes :host github :repo "doomemacs/themes"
;;                :files (:defaults)))

(use-package doom-themes
  :ensure t
  :config
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t))
(load-theme 'doom-one t)
#+end_src


** FONTS 
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 160 :weight 'medium)
#+end_src
** ORG MODE
*** ORG MAIN
#+begin_src emacs-lisp
;; (use-package org 
;;   :ensure t
;;   :config
;;  (setq org-columns-ellipses " $"
;;       org-hide-emphasis-markers t))

(use-package toc-org
  :ensure t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
(add-hook 'org-mode-hook 'org-indent-mode)

(use-package org-bullets
  :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(require 'org-tempo)
#+end_src

*** ORG MODE GRAphical TWeaks
#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0) ;; set src block automatic indent to 0 instead of 2.
(delete-selection-mode 1)    ;; you can select text and delete it by typing.
(electric-indent-mode -1)    ;; turn off the weird indenting that emacs does by default.
#+end_src

** GRAPHICAL USER INTERFACE TWEAKS
*** DEFAULT BIP SOUND DISABLE
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :config
  (setq ring-bell-function #'ignore))
#+end_src

*** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)           ;; Disable the menu bar 
(scroll-bar-mode -1)         ;; disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
#+end_src

*** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(global-visual-line-mode t)  ;; Enable truncated lines
#+end_src

*** DISPLAY LINE NUMBER MODE
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1) ;; Display line numbers
#+end_src

*** FOR PAIR MODE: LIKE(){}
#+begin_src emacs-lisp
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
			   (setq-local electric-pair-inhibit-predicate
                       `(lambda (c)
                      (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

*** ZOOMING IN AND OUT
#+begin_src emacs-lisp
;;========= ZOOMING IN AND OUT ==========
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
;;=========TRANSPARENT STARTUP==========
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
#+end_src

** MINIBUFFER ESCAPE
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit);;MInibuffer escape
#+end_src

** EVIL MODE 
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode 1))

(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))

(use-package evil-tutor
  :ensure t)

;; Using RETURN to follow links in Org/Evil 
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
(setq org-return-follows-link  t)
#+end_src


** COUNSEL AND IVY
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :ensure t
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :ensure t
  :after ivy
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

** TOGGLE SHELL
#+begin_src emacs-lisp
(use-package shell-toggle
  :ensure t)
#+end_src
** GENERAL KEYBINDING
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
 
  ;; Define 'SPC' as the global leader key
  (general-create-definer dt/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"  ;; Leader key
    :global-prefix "M-SPC")  ;; Access leader in insert mode
  
  ;; Define the keybindings
  (dt/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "=" '(perspective-map :wk "Perspective")
    "TAB TAB" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument"))
  
  (dt/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    ;;"b B" '(exwm-workspace-switch-to-buffer :wk "Exwm buffer switch")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))
  
  (dt/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))
  
  (dt/leader-keys
    "e" '(:ignore t :wk "Eshell/Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e R" '(eww-reload :which-key "Reload current page in EWW")
    "e s" '(eshell :which-key "Eshell")
    "e w" '(eww :which-key "EWW emacs web wowser"))
  
  (dt/leader-keys
    "f" '(:ignore t :wk "Files")    
    "f c" '((lambda () (interactive)
              (find-file "~/.emacs.d/config.org")) 
            :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
              (dired "~/.config/emacs/")) 
            :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
    "f i" '((lambda () (interactive)
              (find-file "~/.config/emacs/init.el")) 
            :wk "Open emacs init.el")
    "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
    "f l" '(counsel-locate :wk "Locate a file")
    "f r" '(counsel-recentf :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))
  
  (dt/leader-keys
    "g" '(:ignore t :wk "Git")    
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create") 
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find") 
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

  (dt/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
		(load-file "~/.emacs.d/init.el")
		(ignore (elpaca-process-queues)))
              :wk "Reload emacs config")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (dt/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (dt/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (dt/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (dt/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name"))

  ;; projectile-command-map already has a ton of bindings 
  ;; set for us, so no need to specify each individually.
  (dt/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))

  (dt/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (dt/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t d" '(counsel-linux-app :wk "Open application")
    "t v" '(shell-toggle :wk "Toggle shell"))

  (dt/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
  )
#+end_src


** ALT KEYBINDING
#+begin_src emacs-lisp
;; Bookmarks and Buffers keybindings
(define-key global-map (kbd "M-b") nil)  ;; Start defining a prefix for M-b
;;(define-key global-map (kbd "M-b b") 'switch-to-buffer)
(define-key global-map (kbd "M-b i") 'ibuffer) ;; Uncomment if needed
(define-key global-map (kbd "M-b w") 'exwm-workspace-switch)
(define-key global-map (kbd "M-b c") 'clone-indirect-buffer)
(define-key global-map (kbd "M-b C") 'clone-indirect-buffer-other-window)
(define-key global-map (kbd "M-b d") 'bookmark-delete)
;;(define-key global-map (kbd "M-b i") 'ibuffer)
(define-key global-map (kbd "M-b k") 'kill-buffer-and-window)
(define-key global-map (kbd "M-b K") 'kill-some-buffers)
(define-key global-map (kbd "M-b l") 'list-bookmarks)
(define-key global-map (kbd "M-b m") 'bookmark-set)
(define-key global-map (kbd "M-b n") 'next-buffer)
(define-key global-map (kbd "M-b p") 'previous-buffer)
(define-key global-map (kbd "M-b r") 'revert-buffer)
(define-key global-map (kbd "M-b R") 'rename-buffer)
(define-key global-map (kbd "M-b s") 'basic-save-buffer)
(define-key global-map (kbd "M-b S") 'save-some-buffers)

;; Define M-w as a prefix key for WINDOWS
(define-key global-map (kbd "M-w") nil)  ;; Start defining a prefix for s-w
;; Window management keybindings
(define-key global-map (kbd "M-w c") 'evil-window-delete)
(define-key global-map (kbd "M-w n") 'evil-window-new)
(define-key global-map (kbd "M-w s") 'evil-window-split)
(define-key global-map (kbd "M-w v") 'evil-window-vsplit)

;; Window motions
(define-key global-map (kbd "M-w h") 'evil-window-left)
(define-key global-map (kbd "M-w j") 'evil-window-down)
(define-key global-map (kbd "M-w k") 'evil-window-up)
(define-key global-map (kbd "M-w l") 'evil-window-right)
(define-key global-map (kbd "M-w w") 'evil-window-next)
(define-key global-map (kbd "M-w m") 'save-buffers-kill-emacs)
;; Move windows
(define-key global-map (kbd "M-w H") 'buf-move-left)
(define-key global-map (kbd "M-w J") 'buf-move-down)
(define-key global-map (kbd "M-w K") 'buf-move-up)
(define-key global-map (kbd "M-w L") 'buf-move-right)

;; Define M-d as a prefix key in global-map
(define-key global-map (kbd "M-d") nil)

;; Dired keybindings under M-d
(define-key global-map (kbd "M-d D") 'dired) ;; Open Dired
(define-key global-map (kbd "M-d d") 'app-launcher-run-app) 
(define-key global-map (kbd "M-d j") 'dired-jump) ;; Jump to current directory in Dired
(define-key global-map (kbd "M-d n") 'neotree-dir) ;; Open directory in Neotree
(define-key global-map (kbd "M-d p") 'peep-dired) ;; Peep Dired preview
(define-key global-map (kbd "M-d x") 'kill-emacs) ;; Kill emacs


(define-key global-map (kbd "M-m") nil)

(define-key global-map (kbd "M-m m") #'Power-menu)
(define-key global-map (kbd "M-m l") #'Lock-screen)
(define-key global-map (kbd "M-m L") #'Update-lockscreen-bg)
(define-key global-map (kbd "M-m s") #'Update-sddm-wallpaper)

#+end_src


** WHICH KEY
#+begin_src emacs-lisp
(use-package which-key
:ensure t
:init
  (which-key-mode 1)
:config
(setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit nil
        which-key-separator " → " ))
#+end_src

** TRANSPERENCY
#+begin_src emacs-lisp

(defun my/update-transparency-based-on-buffer ()
  "Set transparency to 0 if in *scratch*, else back to default."
  (if (string= (buffer-name) "*blank*")
      ;; scratch buffer: fully transparent
      (progn
        (set-frame-parameter (selected-frame) 'alpha-background 0)
        (set-frame-parameter (selected-frame) 'alpha '(0 . 0)))
    ;; all other buffers: normal transparency
    (progn
      (set-frame-parameter (selected-frame) 'alpha-background 100)
      (set-frame-parameter (selected-frame) 'alpha '(100 . 100)))))
;; Hook to check every time buffer changes
(add-hook 'buffer-list-update-hook #'my/update-transparency-based-on-buffer)
#+end_src



** MOUSE, BATTERY AND BACKGROUND SETUP

#+begin_src emacs-lisp
(setq mouse-autoselect-window t
      focus-follows-mouse t)
(display-battery-mode 1) ;;Show the battery
;; (setq display-time-day-and-date t)
(display-time-mode 1) ;; Show Time
(setq display-time-format "%H:%M") ;; Time Formate 
#+end_src



** IDE
#+begin_src emacs-lisp
;; ========== Company Mode ==========
(use-package company
  :ensure t
  :diminish
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
              ("<tab>" . company-complete-selection)
              ("RET" . nil)
              ("<return>" . nil)) ;; Disable RET inside company popup
  :init (global-company-mode)
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0.0)
  (company-show-numbers t)
  (company-tooltip-align-annotations t))

;; ========== Flycheck Mode ==========
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))

;; ========== LSP Mode ==========
(use-package lsp-mode
  :ensure t
  :commands lsp
  :hook ((python-mode . lsp)
         (c-mode . lsp)
         (c++-mode . lsp)
         (js-mode . lsp)
         (typescript-mode . lsp)
         (go-mode . lsp)
         (rust-mode . lsp))
  :custom
  (lsp-pyright-typechecking-mode "basic")
  (lsp-enable-symbol-highlighting t)
  (lsp-prefer-flymake nil))
#+end_src

** LANGUAGE SUPPORT FOR IDE
*** PYTHON
#+begin_src emacs-lisp
(use-package python-mode
  :hook (python-mode . lsp)
  :custom
  (python-shell-interpreter "python3"))

(use-package lsp-pyright
  :ensure t
  :after lsp-mode
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))

;; Fix for Python indentation after def:
(add-hook 'python-mode-hook
          (lambda ()
            (electric-indent-local-mode 1)
            (setq python-indent-offset 4)))

;; Optional but helpful:
(setq lsp-enable-on-type-formatting t)
(setq lsp-enable-indentation t)

#+end_src



** DASHBOARD
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  ;; (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "NOTHING IS HERE")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "/home/nothing/Pictures/555.png"))  ;; use custom image as banner
;;   (setq dashboard-center-content nil) ;; set to 't' for centered content
;;   (setq dashboard-items '((recents . 5)
;;                           (agenda . 5 )
;;                           (bookmarks . 3)
;;                           (projects . 3)
;;                           (registers . 3)))
;; :custom
;; (dashboard-modify-heading-icons '((recents . "file-text")
;;                                   (bookmarks . "book")))
:config
(dashboard-setup-startup-hook)
#+end_src


** DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :ensure t
  :config
  (setq dired-open-extensions '(("gif" . "loupe")
                                ("jpg" . "loupe")
				("jpeg" . "loupe")
				("pdf" . "okular")
                                ("png" . "loupe")
                                ("mkv" . "vlc")
                                ("mp4" . "vlc"))))

(use-package peep-dired
  :ensure t
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

(setq dired-listing-switches "-lha")
;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src


** BUFFER MOVE
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src


